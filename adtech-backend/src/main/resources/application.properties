
# adtech-backend/src/main/resources/application.properties

# DataSource Configuration for PostgreSQL on Render
# These properties will be populated by Render's internal connections.
spring.datasource.url=$postgresql://adtech_user:RiIlPOhdy6sMeRGuqawpTl4MMI5NwVUX@dpg-d2326mmmcj7s73d3eg2g-a.ohio-postgres.render.com/adtech_reporting_db
spring.datasource.username=$adtech_user
spring.datasource.password=$RiIlPOhdy6sMeRGuqawpTl4MMI5NwVUX
spring.datasource.driver-class-name=org.postgresql.Driver 

# JPA Configuration for PostgreSQL
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect 
spring.jpa.open-in-view=false
spring.devtools.livereload.enabled=false

# Server Port - Render will provide the PORT env var. Dockerfile EXPOSE should match.
server.port=${PORT:8091}

# Logging and SQL formatting
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Multipart File Upload Configuration
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# Logging levels for web aspects
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
logging.level.org.springframework.web.servlet.mvc.method=DEBUG
logging.level.org.springframework.web.servlet.handler=DEBUG
logging.level.org.springframework.web.multipart=DEBUG

# CORS Configuration (keep commented for now)
#spring.web.cors.mapping./api/**.allowed-origins=http://localhost:3000,https://your-frontend-domain.vercel.app
#spring.web.cors.mapping./api/**.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
#spring.web.cors.mapping./api/**.allowed-headers=*
#spring.web.cors.mapping./api/**.allow-credentials=true